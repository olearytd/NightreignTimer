name: iOS CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Set your project details here to avoid complex scripting
  PROJECT_NAME: "NightreignTimer.xcodeproj" # Or .xcworkspace if you use one
  SCHEME_NAME: "NightreignTimer" # Your primary scheme name

jobs:
  build-and-test:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest available iPhone simulator
        id: set_simulator
        shell: bash
        run: |
          set -euo pipefail
          /usr/bin/python3 - <<'PY'
          import json, subprocess, sys
          preferred = "iPhone 16 Pro Max"
          # Get available iOS runtimes, newest first
          r = subprocess.run(["xcrun","simctl","list","--json","runtimes"], capture_output=True, text=True, check=True)
          data = json.loads(r.stdout)
          ios = [rt for rt in data.get("runtimes", []) if rt.get("platform") == "iOS" and rt.get("isAvailable")]
          if not ios:
              print("::error::No iOS runtimes available on this runner"); sys.exit(1)
          def ver_tuple(v): return tuple(int(x) for x in v.split("."))
          ios.sort(key=lambda rt: ver_tuple(rt.get("version","0")), reverse=True)
          runtime_id = ios[0]["identifier"]
          # Get available devices for that runtime
          r = subprocess.run(["xcrun","simctl","list","--json","devices", runtime_id], capture_output=True, text=True, check=True)
          devs = json.loads(r.stdout)["devices"].get(runtime_id, [])
          avail = [d for d in devs if d.get("isAvailable")]
          chosen = next((d for d in avail if d.get("name") == preferred), None)
          if not chosen:
              iphones = [d for d in avail if d.get("name","").startswith("iPhone")]
              chosen = iphones[0] if iphones else (avail[0] if avail else None)
          if not chosen:
              print(f"::error::No available simulators for runtime {runtime_id}"); sys.exit(1)
          print(f"id={chosen['udid']}")
          print(f"name={chosen['name']}")
          print(f"runtime={runtime_id}")
          PY
          # Map python prints to GitHub Outputs
          {
            while IFS='=' read -r k v; do
              [[ -z "${k:-}" || -z "${v:-}" ]] && continue
              echo "$k=$v" >> "$GITHUB_OUTPUT"
              echo "Selected $k: $v"
            done
          } <(tail -n 3)

      - name: Boot simulator
        run: |
          xcrun simctl boot "${{ steps.set_simulator.outputs.id }}" || true
          xcrun simctl bootstatus "${{ steps.set_simulator.outputs.id }}" -b

      - name: Build
        run: |
          xcodebuild build-for-testing \
            -scheme "$SCHEME_NAME" \
            -project "$PROJECT_NAME" \
            -destination "platform=iOS Simulator,id=${{ steps.set_simulator.outputs.id }}"

      - name: Test
        run: |
          xcodebuild test-without-building \
            -scheme "$SCHEME_NAME" \
            -project "$PROJECT_NAME" \
            -destination "platform=iOS Simulator,id=${{ steps.set_simulator.outputs.id }}"
